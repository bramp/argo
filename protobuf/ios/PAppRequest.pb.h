// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PAppRequest.proto

#ifndef PROTOBUF_PAppRequest_2eproto__INCLUDED
#define PROTOBUF_PAppRequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PAppRequest_2eproto();
void protobuf_AssignDesc_PAppRequest_2eproto();
void protobuf_ShutdownFile_PAppRequest_2eproto();

class PAppRequestParam;
class PAppRequest;

// ===================================================================

class PAppRequestParam : public ::google::protobuf::Message {
 public:
  PAppRequestParam();
  virtual ~PAppRequestParam();

  PAppRequestParam(const PAppRequestParam& from);

  inline PAppRequestParam& operator=(const PAppRequestParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PAppRequestParam& default_instance();

  void Swap(PAppRequestParam* other);

  // implements Message ----------------------------------------------

  PAppRequestParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PAppRequestParam& from);
  void MergeFrom(const PAppRequestParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 intValue = 2;
  inline bool has_intvalue() const;
  inline void clear_intvalue();
  static const int kIntValueFieldNumber = 2;
  inline ::google::protobuf::int32 intvalue() const;
  inline void set_intvalue(::google::protobuf::int32 value);

  // optional string strValue = 3;
  inline bool has_strvalue() const;
  inline void clear_strvalue();
  static const int kStrValueFieldNumber = 3;
  inline const ::std::string& strvalue() const;
  inline void set_strvalue(const ::std::string& value);
  inline void set_strvalue(const char* value);
  inline void set_strvalue(const char* value, size_t size);
  inline ::std::string* mutable_strvalue();
  inline ::std::string* release_strvalue();
  inline void set_allocated_strvalue(::std::string* strvalue);

  // optional int64 longValue = 4;
  inline bool has_longvalue() const;
  inline void clear_longvalue();
  static const int kLongValueFieldNumber = 4;
  inline ::google::protobuf::int64 longvalue() const;
  inline void set_longvalue(::google::protobuf::int64 value);

  // optional float floatValue = 5;
  inline bool has_floatvalue() const;
  inline void clear_floatvalue();
  static const int kFloatValueFieldNumber = 5;
  inline float floatvalue() const;
  inline void set_floatvalue(float value);

  // optional bool boolValue = 6;
  inline bool has_boolvalue() const;
  inline void clear_boolvalue();
  static const int kBoolValueFieldNumber = 6;
  inline bool boolvalue() const;
  inline void set_boolvalue(bool value);

  // optional bytes bytesValue = 7;
  inline bool has_bytesvalue() const;
  inline void clear_bytesvalue();
  static const int kBytesValueFieldNumber = 7;
  inline const ::std::string& bytesvalue() const;
  inline void set_bytesvalue(const ::std::string& value);
  inline void set_bytesvalue(const char* value);
  inline void set_bytesvalue(const void* value, size_t size);
  inline ::std::string* mutable_bytesvalue();
  inline ::std::string* release_bytesvalue();
  inline void set_allocated_bytesvalue(::std::string* bytesvalue);

  // @@protoc_insertion_point(class_scope:PAppRequestParam)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_intvalue();
  inline void clear_has_intvalue();
  inline void set_has_strvalue();
  inline void clear_has_strvalue();
  inline void set_has_longvalue();
  inline void clear_has_longvalue();
  inline void set_has_floatvalue();
  inline void clear_has_floatvalue();
  inline void set_has_boolvalue();
  inline void clear_has_boolvalue();
  inline void set_has_bytesvalue();
  inline void clear_has_bytesvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* strvalue_;
  ::google::protobuf::int32 intvalue_;
  float floatvalue_;
  ::google::protobuf::int64 longvalue_;
  ::std::string* bytesvalue_;
  bool boolvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PAppRequest_2eproto();
  friend void protobuf_AssignDesc_PAppRequest_2eproto();
  friend void protobuf_ShutdownFile_PAppRequest_2eproto();

  void InitAsDefaultInstance();
  static PAppRequestParam* default_instance_;
};
// -------------------------------------------------------------------

class PAppRequest : public ::google::protobuf::Message {
 public:
  PAppRequest();
  virtual ~PAppRequest();

  PAppRequest(const PAppRequest& from);

  inline PAppRequest& operator=(const PAppRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PAppRequest& default_instance();

  void Swap(PAppRequest* other);

  // implements Message ----------------------------------------------

  PAppRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PAppRequest& from);
  void MergeFrom(const PAppRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string authId = 1;
  inline bool has_authid() const;
  inline void clear_authid();
  static const int kAuthIdFieldNumber = 1;
  inline const ::std::string& authid() const;
  inline void set_authid(const ::std::string& value);
  inline void set_authid(const char* value);
  inline void set_authid(const char* value, size_t size);
  inline ::std::string* mutable_authid();
  inline ::std::string* release_authid();
  inline void set_allocated_authid(::std::string* authid);

  // optional string sessionId = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIdFieldNumber = 2;
  inline const ::std::string& sessionid() const;
  inline void set_sessionid(const ::std::string& value);
  inline void set_sessionid(const char* value);
  inline void set_sessionid(const char* value, size_t size);
  inline ::std::string* mutable_sessionid();
  inline ::std::string* release_sessionid();
  inline void set_allocated_sessionid(::std::string* sessionid);

  // optional int32 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional string sign = 4;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 4;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional string nonce = 5;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 5;
  inline const ::std::string& nonce() const;
  inline void set_nonce(const ::std::string& value);
  inline void set_nonce(const char* value);
  inline void set_nonce(const char* value, size_t size);
  inline ::std::string* mutable_nonce();
  inline ::std::string* release_nonce();
  inline void set_allocated_nonce(::std::string* nonce);

  // optional string userAgent = 6;
  inline bool has_useragent() const;
  inline void clear_useragent();
  static const int kUserAgentFieldNumber = 6;
  inline const ::std::string& useragent() const;
  inline void set_useragent(const ::std::string& value);
  inline void set_useragent(const char* value);
  inline void set_useragent(const char* value, size_t size);
  inline ::std::string* mutable_useragent();
  inline ::std::string* release_useragent();
  inline void set_allocated_useragent(::std::string* useragent);

  // optional string path = 7;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 7;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // repeated .PAppRequestParam param = 8;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 8;
  inline const ::PAppRequestParam& param(int index) const;
  inline ::PAppRequestParam* mutable_param(int index);
  inline ::PAppRequestParam* add_param();
  inline const ::google::protobuf::RepeatedPtrField< ::PAppRequestParam >&
      param() const;
  inline ::google::protobuf::RepeatedPtrField< ::PAppRequestParam >*
      mutable_param();

  // @@protoc_insertion_point(class_scope:PAppRequest)
 private:
  inline void set_has_authid();
  inline void clear_has_authid();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_nonce();
  inline void clear_has_nonce();
  inline void set_has_useragent();
  inline void clear_has_useragent();
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* authid_;
  ::std::string* sessionid_;
  ::std::string* sign_;
  ::std::string* nonce_;
  ::std::string* useragent_;
  ::std::string* path_;
  ::google::protobuf::RepeatedPtrField< ::PAppRequestParam > param_;
  ::google::protobuf::int32 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PAppRequest_2eproto();
  friend void protobuf_AssignDesc_PAppRequest_2eproto();
  friend void protobuf_ShutdownFile_PAppRequest_2eproto();

  void InitAsDefaultInstance();
  static PAppRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// PAppRequestParam

// required string name = 1;
inline bool PAppRequestParam::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PAppRequestParam::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PAppRequestParam::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PAppRequestParam::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PAppRequestParam::name() const {
  return *name_;
}
inline void PAppRequestParam::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PAppRequestParam::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PAppRequestParam::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppRequestParam::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PAppRequestParam::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppRequestParam::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 intValue = 2;
inline bool PAppRequestParam::has_intvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PAppRequestParam::set_has_intvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PAppRequestParam::clear_has_intvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PAppRequestParam::clear_intvalue() {
  intvalue_ = 0;
  clear_has_intvalue();
}
inline ::google::protobuf::int32 PAppRequestParam::intvalue() const {
  return intvalue_;
}
inline void PAppRequestParam::set_intvalue(::google::protobuf::int32 value) {
  set_has_intvalue();
  intvalue_ = value;
}

// optional string strValue = 3;
inline bool PAppRequestParam::has_strvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PAppRequestParam::set_has_strvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PAppRequestParam::clear_has_strvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PAppRequestParam::clear_strvalue() {
  if (strvalue_ != &::google::protobuf::internal::kEmptyString) {
    strvalue_->clear();
  }
  clear_has_strvalue();
}
inline const ::std::string& PAppRequestParam::strvalue() const {
  return *strvalue_;
}
inline void PAppRequestParam::set_strvalue(const ::std::string& value) {
  set_has_strvalue();
  if (strvalue_ == &::google::protobuf::internal::kEmptyString) {
    strvalue_ = new ::std::string;
  }
  strvalue_->assign(value);
}
inline void PAppRequestParam::set_strvalue(const char* value) {
  set_has_strvalue();
  if (strvalue_ == &::google::protobuf::internal::kEmptyString) {
    strvalue_ = new ::std::string;
  }
  strvalue_->assign(value);
}
inline void PAppRequestParam::set_strvalue(const char* value, size_t size) {
  set_has_strvalue();
  if (strvalue_ == &::google::protobuf::internal::kEmptyString) {
    strvalue_ = new ::std::string;
  }
  strvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppRequestParam::mutable_strvalue() {
  set_has_strvalue();
  if (strvalue_ == &::google::protobuf::internal::kEmptyString) {
    strvalue_ = new ::std::string;
  }
  return strvalue_;
}
inline ::std::string* PAppRequestParam::release_strvalue() {
  clear_has_strvalue();
  if (strvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strvalue_;
    strvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppRequestParam::set_allocated_strvalue(::std::string* strvalue) {
  if (strvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete strvalue_;
  }
  if (strvalue) {
    set_has_strvalue();
    strvalue_ = strvalue;
  } else {
    clear_has_strvalue();
    strvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 longValue = 4;
inline bool PAppRequestParam::has_longvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PAppRequestParam::set_has_longvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PAppRequestParam::clear_has_longvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PAppRequestParam::clear_longvalue() {
  longvalue_ = GOOGLE_LONGLONG(0);
  clear_has_longvalue();
}
inline ::google::protobuf::int64 PAppRequestParam::longvalue() const {
  return longvalue_;
}
inline void PAppRequestParam::set_longvalue(::google::protobuf::int64 value) {
  set_has_longvalue();
  longvalue_ = value;
}

// optional float floatValue = 5;
inline bool PAppRequestParam::has_floatvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PAppRequestParam::set_has_floatvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PAppRequestParam::clear_has_floatvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PAppRequestParam::clear_floatvalue() {
  floatvalue_ = 0;
  clear_has_floatvalue();
}
inline float PAppRequestParam::floatvalue() const {
  return floatvalue_;
}
inline void PAppRequestParam::set_floatvalue(float value) {
  set_has_floatvalue();
  floatvalue_ = value;
}

// optional bool boolValue = 6;
inline bool PAppRequestParam::has_boolvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PAppRequestParam::set_has_boolvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PAppRequestParam::clear_has_boolvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PAppRequestParam::clear_boolvalue() {
  boolvalue_ = false;
  clear_has_boolvalue();
}
inline bool PAppRequestParam::boolvalue() const {
  return boolvalue_;
}
inline void PAppRequestParam::set_boolvalue(bool value) {
  set_has_boolvalue();
  boolvalue_ = value;
}

// optional bytes bytesValue = 7;
inline bool PAppRequestParam::has_bytesvalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PAppRequestParam::set_has_bytesvalue() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PAppRequestParam::clear_has_bytesvalue() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PAppRequestParam::clear_bytesvalue() {
  if (bytesvalue_ != &::google::protobuf::internal::kEmptyString) {
    bytesvalue_->clear();
  }
  clear_has_bytesvalue();
}
inline const ::std::string& PAppRequestParam::bytesvalue() const {
  return *bytesvalue_;
}
inline void PAppRequestParam::set_bytesvalue(const ::std::string& value) {
  set_has_bytesvalue();
  if (bytesvalue_ == &::google::protobuf::internal::kEmptyString) {
    bytesvalue_ = new ::std::string;
  }
  bytesvalue_->assign(value);
}
inline void PAppRequestParam::set_bytesvalue(const char* value) {
  set_has_bytesvalue();
  if (bytesvalue_ == &::google::protobuf::internal::kEmptyString) {
    bytesvalue_ = new ::std::string;
  }
  bytesvalue_->assign(value);
}
inline void PAppRequestParam::set_bytesvalue(const void* value, size_t size) {
  set_has_bytesvalue();
  if (bytesvalue_ == &::google::protobuf::internal::kEmptyString) {
    bytesvalue_ = new ::std::string;
  }
  bytesvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppRequestParam::mutable_bytesvalue() {
  set_has_bytesvalue();
  if (bytesvalue_ == &::google::protobuf::internal::kEmptyString) {
    bytesvalue_ = new ::std::string;
  }
  return bytesvalue_;
}
inline ::std::string* PAppRequestParam::release_bytesvalue() {
  clear_has_bytesvalue();
  if (bytesvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bytesvalue_;
    bytesvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppRequestParam::set_allocated_bytesvalue(::std::string* bytesvalue) {
  if (bytesvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete bytesvalue_;
  }
  if (bytesvalue) {
    set_has_bytesvalue();
    bytesvalue_ = bytesvalue;
  } else {
    clear_has_bytesvalue();
    bytesvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PAppRequest

// required string authId = 1;
inline bool PAppRequest::has_authid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PAppRequest::set_has_authid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PAppRequest::clear_has_authid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PAppRequest::clear_authid() {
  if (authid_ != &::google::protobuf::internal::kEmptyString) {
    authid_->clear();
  }
  clear_has_authid();
}
inline const ::std::string& PAppRequest::authid() const {
  return *authid_;
}
inline void PAppRequest::set_authid(const ::std::string& value) {
  set_has_authid();
  if (authid_ == &::google::protobuf::internal::kEmptyString) {
    authid_ = new ::std::string;
  }
  authid_->assign(value);
}
inline void PAppRequest::set_authid(const char* value) {
  set_has_authid();
  if (authid_ == &::google::protobuf::internal::kEmptyString) {
    authid_ = new ::std::string;
  }
  authid_->assign(value);
}
inline void PAppRequest::set_authid(const char* value, size_t size) {
  set_has_authid();
  if (authid_ == &::google::protobuf::internal::kEmptyString) {
    authid_ = new ::std::string;
  }
  authid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppRequest::mutable_authid() {
  set_has_authid();
  if (authid_ == &::google::protobuf::internal::kEmptyString) {
    authid_ = new ::std::string;
  }
  return authid_;
}
inline ::std::string* PAppRequest::release_authid() {
  clear_has_authid();
  if (authid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = authid_;
    authid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppRequest::set_allocated_authid(::std::string* authid) {
  if (authid_ != &::google::protobuf::internal::kEmptyString) {
    delete authid_;
  }
  if (authid) {
    set_has_authid();
    authid_ = authid;
  } else {
    clear_has_authid();
    authid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sessionId = 2;
inline bool PAppRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PAppRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PAppRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PAppRequest::clear_sessionid() {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    sessionid_->clear();
  }
  clear_has_sessionid();
}
inline const ::std::string& PAppRequest::sessionid() const {
  return *sessionid_;
}
inline void PAppRequest::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void PAppRequest::set_sessionid(const char* value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void PAppRequest::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppRequest::mutable_sessionid() {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  return sessionid_;
}
inline ::std::string* PAppRequest::release_sessionid() {
  clear_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sessionid_;
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppRequest::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionid_;
  }
  if (sessionid) {
    set_has_sessionid();
    sessionid_ = sessionid;
  } else {
    clear_has_sessionid();
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 version = 3;
inline bool PAppRequest::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PAppRequest::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PAppRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PAppRequest::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 PAppRequest::version() const {
  return version_;
}
inline void PAppRequest::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional string sign = 4;
inline bool PAppRequest::has_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PAppRequest::set_has_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PAppRequest::clear_has_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PAppRequest::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& PAppRequest::sign() const {
  return *sign_;
}
inline void PAppRequest::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void PAppRequest::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void PAppRequest::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppRequest::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* PAppRequest::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppRequest::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nonce = 5;
inline bool PAppRequest::has_nonce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PAppRequest::set_has_nonce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PAppRequest::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PAppRequest::clear_nonce() {
  if (nonce_ != &::google::protobuf::internal::kEmptyString) {
    nonce_->clear();
  }
  clear_has_nonce();
}
inline const ::std::string& PAppRequest::nonce() const {
  return *nonce_;
}
inline void PAppRequest::set_nonce(const ::std::string& value) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(value);
}
inline void PAppRequest::set_nonce(const char* value) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(value);
}
inline void PAppRequest::set_nonce(const char* value, size_t size) {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  nonce_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppRequest::mutable_nonce() {
  set_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    nonce_ = new ::std::string;
  }
  return nonce_;
}
inline ::std::string* PAppRequest::release_nonce() {
  clear_has_nonce();
  if (nonce_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nonce_;
    nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppRequest::set_allocated_nonce(::std::string* nonce) {
  if (nonce_ != &::google::protobuf::internal::kEmptyString) {
    delete nonce_;
  }
  if (nonce) {
    set_has_nonce();
    nonce_ = nonce;
  } else {
    clear_has_nonce();
    nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string userAgent = 6;
inline bool PAppRequest::has_useragent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PAppRequest::set_has_useragent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PAppRequest::clear_has_useragent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PAppRequest::clear_useragent() {
  if (useragent_ != &::google::protobuf::internal::kEmptyString) {
    useragent_->clear();
  }
  clear_has_useragent();
}
inline const ::std::string& PAppRequest::useragent() const {
  return *useragent_;
}
inline void PAppRequest::set_useragent(const ::std::string& value) {
  set_has_useragent();
  if (useragent_ == &::google::protobuf::internal::kEmptyString) {
    useragent_ = new ::std::string;
  }
  useragent_->assign(value);
}
inline void PAppRequest::set_useragent(const char* value) {
  set_has_useragent();
  if (useragent_ == &::google::protobuf::internal::kEmptyString) {
    useragent_ = new ::std::string;
  }
  useragent_->assign(value);
}
inline void PAppRequest::set_useragent(const char* value, size_t size) {
  set_has_useragent();
  if (useragent_ == &::google::protobuf::internal::kEmptyString) {
    useragent_ = new ::std::string;
  }
  useragent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppRequest::mutable_useragent() {
  set_has_useragent();
  if (useragent_ == &::google::protobuf::internal::kEmptyString) {
    useragent_ = new ::std::string;
  }
  return useragent_;
}
inline ::std::string* PAppRequest::release_useragent() {
  clear_has_useragent();
  if (useragent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = useragent_;
    useragent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppRequest::set_allocated_useragent(::std::string* useragent) {
  if (useragent_ != &::google::protobuf::internal::kEmptyString) {
    delete useragent_;
  }
  if (useragent) {
    set_has_useragent();
    useragent_ = useragent;
  } else {
    clear_has_useragent();
    useragent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string path = 7;
inline bool PAppRequest::has_path() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PAppRequest::set_has_path() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PAppRequest::clear_has_path() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PAppRequest::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& PAppRequest::path() const {
  return *path_;
}
inline void PAppRequest::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void PAppRequest::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void PAppRequest::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PAppRequest::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* PAppRequest::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PAppRequest::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .PAppRequestParam param = 8;
inline int PAppRequest::param_size() const {
  return param_.size();
}
inline void PAppRequest::clear_param() {
  param_.Clear();
}
inline const ::PAppRequestParam& PAppRequest::param(int index) const {
  return param_.Get(index);
}
inline ::PAppRequestParam* PAppRequest::mutable_param(int index) {
  return param_.Mutable(index);
}
inline ::PAppRequestParam* PAppRequest::add_param() {
  return param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PAppRequestParam >&
PAppRequest::param() const {
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::PAppRequestParam >*
PAppRequest::mutable_param() {
  return &param_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PAppRequest_2eproto__INCLUDED
